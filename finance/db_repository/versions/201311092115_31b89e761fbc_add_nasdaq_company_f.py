"""Add Nasdaq company financials.

Revision ID: 31b89e761fbc
Revises: dc13c9437a8
Create Date: 2013-11-09 21:15:12.361565

"""

# revision identifiers, used by Alembic.
revision = '31b89e761fbc'
down_revision = 'dc13c9437a8'

from alembic import op
import sqlalchemy as sa


def upgrade():
  op.create_table(
    "nasdaq_company_financials",
    sa.Column("id", sa.Integer, primary_key=True),
    sa.Column("company_id", sa.Integer, sa.ForeignKey("google_companies.id")),
    # u'Period Ending:',
    sa.Column("period_ending", sa.Date),
    # u'Quarter Ending:',
    sa.Column("quarter_ending", sa.Date),
    # u'Accounting Changes',
    sa.Column("accounting_changes", sa.Float),
    # u'Accounts Payable',
    sa.Column("accounts_payable", sa.Float),
    # u'Accounts Receivable',
    sa.Column("accounts_receivable", sa.Float),
    # u'Accumulated Amortization',
    sa.Column("accumulated_amortization", sa.Float),
    # u"Add'l income/expense items",
    sa.Column("additional_income_or_expense_items", sa.Float),
    # u'Adjustments to Net Income',
    sa.Column("adjustments_to_net_income", sa.Float),
    # u'Capital Expenditures',
    sa.Column("capital_expenditures", sa.Float),
    # u'Capital Surplus',
    sa.Column("capital_surpolus", sa.Float),
    # u'Cash and Cash Equivalents',
    sa.Column("cash_and_equivalents", sa.Float),
    # u'Common Stocks',
    sa.Column("common_stocks", sa.Float),
    # u'Cost of Revenue',
    sa.Column("cost_of_revenue", sa.Float),
    # u'Deferred Asset Charges',
    sa.Column("deferred_asset_charges", sa.Float),
    # u'Deferred Liability Charges',
    sa.Column("deferred_liability_charges", sa.Float),
    # u'Depreciation',
    sa.Column("depreciation", sa.Float),
    # u'Discontinued Operations',
    sa.Column("discontinued_operations", sa.Float),
    # u'Dividends Paid',
    sa.Column("dividends_paid", sa.Float),
    # u'Earnings Before Interest and Tax',
    sa.Column("earnings_before_interest_and_tax", sa.Float),
    # u'Earnings Before Tax',
    sa.Column("earnings_before_tax", sa.Float),
    # u'Effect of Exchange Rate',
    sa.Column("effect_of_exchange_rate", sa.Float),
    # u'Equity Earnings Unconsolidated Subsidiary',
    sa.Column("equity_earnings_unconsolidated_subsidiary", sa.Float),
    # u'Extraordinary Items',
    sa.Column("extraordinary_items", sa.Float),
    # u'Fixed Assets',
    sa.Column("fixed_assets", sa.Float),
    # u'Goodwill',
    sa.Column("goodwill", sa.Float),
    # u'Gross Profit',
    sa.Column("gross_profit", sa.Float),
    # u'Income Tax',
    sa.Column("income_tax", sa.Float),
    # u'Intangible Assets',
    sa.Column("intangible_assets", sa.Float),
    # u'Interest Expense',
    sa.Column("interest_expense", sa.Float),
    # u'Inventory',
    sa.Column("inventory", sa.Float),
    # u'Investments',
    sa.Column("investments", sa.Float),
    # u'Liabilities',
    sa.Column("liabilities", sa.Float),
    # u'Long Term Debt',
    sa.Column("long_term_debt", sa.Float),
    # u'Long Term Investments',
    sa.Column("long_term_investments", sa.Float),
    # u'Minority Interest',
    sa.Column("minority_interest", sa.Float),
    # u'Misc Stocks',
    sa.Column("misc_stocks", sa.Float),
    # u'Negative Goodwill',
    sa.Column("negative_goodwill", sa.Float),
    # u'Net Borrowings',
    sa.Column("net_borrowing", sa.Float),
    # u'Net Cash Flow',
    sa.Column("net_cash_flow", sa.Float),
    # u'Net Cash Flow-Operating',
    sa.Column("net_operating_cash_flow", sa.Float),
    # u'Net Cash Flows-Financing',
    sa.Column("net_cash_flow_from_financing", sa.Float),
    # u'Net Cash Flows-Investing',
    sa.Column("net_cash_flow_from_investing", sa.Float),
    # u'Net Income',
    sa.Column("net_income", sa.Float),
    # u'Net Income Adjustments',
    sa.Column("net_income_adjustments", sa.Float),
    # u'Net Income Applicable to',
    sa.Column("shareholder_net_income", sa.Float),
    # u'Net Income-Cont Operations',
    sa.Column("net_income_from_continuing_operations", sa.Float),
    # u'Net Receivables',
    sa.Column("net_receivables", sa.Float),
    # u'Non-Recurring Items',
    sa.Column("non_recurring_items", sa.Float),
    # u'Operating Income',
    sa.Column("operating_income", sa.Float),
    # u'Other Assets',
    sa.Column("other_assets", sa.Float),
    # u'Other Current Assets',
    sa.Column("other_current_assets", sa.Float),
    # u'Other Current Liabilities',
    sa.Column("other_current_liabilities", sa.Float),
    # u'Other Equity',
    sa.Column("other_equity", sa.Float),
    # u'Other Financing Activities',
    sa.Column("other_financing_activities", sa.Float),
    # u'Other Investing Activities',
    sa.Column("other_investing_activities", sa.Float),
    # u'Other Items',
    sa.Column("other_items", sa.Float),
    # u'Other Liabilities',
    sa.Column("other_liabilities", sa.Float),
    # u'Other Operating Activities',
    sa.Column("other_operating_activities", sa.Float),
    # u'Other Operating Items',
    sa.Column("other_operating_items", sa.Float),
    # u'Preferred Stocks',
    sa.Column("preferred_stocks", sa.Float),
    # u'Quarter:',
    sa.Column("preferred_stocks", sa.Integer),
    # u'Redeemable Stocks',
    sa.Column("redeemable_stocks", sa.Float),
    # u'Research and Development',
    sa.Column("research_and_development", sa.Float),
    # u'Retained Earnings',
    sa.Column("retained_earnings", sa.Float),
    # u'Sale and Purchase of Stock',
    sa.Column("sale_and_purchase_of_stock", sa.Float),
    # u'Sales, General and Admin',
    sa.Column("sales_general_and_admin", sa.Float),
    # u'Short Term Debt/Current Portion of Long Term Debt',
    sa.Column("short_term_debt", sa.Float),
    # u'Short Term Investments',
    sa.Column("short_term_investments", sa.Float),
    # u'Total Assets',
    sa.Column("total_assets", sa.Float),
    # u'Total Current Assets',
    sa.Column("total_current_assets", sa.Float),
    # u'Total Current Liabilities',
    sa.Column("total_current_liabilities", sa.Float),
    # u'Total Equity',
    sa.Column("total_equity", sa.Float),
    # u'Total Liabilities',
    sa.Column("total_liabilities", sa.Float),
    # u'Total Revenue',
    sa.Column("total_revenue", sa.Float),
    # u'Treasury Stock',
    sa.Column("treasury_stock", sa.Float),
  )

def downgrade():
  op.drop_table("nasdaq_company_financials")
